### Input params check

string(COMPARE EQUAL "@global_install_dir@" "" is_empty)
if(is_empty)
  message(FATAL_ERROR "global_install_dir is empty")
endif()

string(COMPARE EQUAL "@local_install_dir@" "" is_empty)
if(is_empty)
  message(FATAL_ERROR "local_install_dir is empty")
endif()

string(COMPARE EQUAL "@qt_component@" "" is_empty)
if(is_empty)
  message(FATAL_ERROR "qt_component is empty")
endif()

string(COMPARE EQUAL "@hunter_self@" "" is_empty)
if(is_empty)
  message(FATAL_ERROR "hunter_self is empty")
endif()

string(COMPARE EQUAL "@qt_source_dir@" "" is_empty)
if(is_empty)
  message(FATAL_ERROR "qt_source_dir is empty")
endif()

### -- end

string(COMPARE EQUAL "@qt_component@" "qtbase" is_qtbase)
string(COMPARE EQUAL "@qt_component@" "qttools" is_qttools)

if(NOT is_qtbase)
  set(qt_base_list "@global_install_dir@/qtbase_installed_files.cmake")
  if(NOT EXISTS "${qt_base_list}")
    message(FATAL_ERROR "File not found: ${qt_base_list}")
  endif()
  set(QTBASE_INSTALLED_FILES)
  include("${qt_base_list}")
  string(COMPARE EQUAL "${QTBASE_INSTALLED_FILES}" "" is_empty)
  if(is_empty)
    message(FATAL_ERROR "Empty list in file ${qt_base_list}")
  endif()
endif()

include("@hunter_self@/scripts/clear-all.cmake")

set(ENV{ANDROID_API_VERSION} "@ANDROID_API_VERSION@") # used by `make install`

if(is_qttools)
  set(broken_makefile "@qt_source_dir@/qttools/src/qtplugininfo/Makefile")
  if(EXISTS "${broken_makefile}")
    message("Patching: ${broken_makefile}")
  else()
    message(FATAL_ERROR "File not exists: ${broken_makefile}")
  endif()

  # Workaround for bug: https://bugreports.qt.io/browse/QTBUG-47453
  # Have to do it several times, don't ask me why...
  foreach(x RANGE 2)
    file(READ "${broken_makefile}" makefile_content)
    string(
        REPLACE
        "\$(INSTALL_ROOT)"
        "@local_install_dir@"
        makefile_content
        "${makefile_content}"
    )
    file(WRITE "${broken_makefile}" "${makefile_content}")

    execute_process(COMMAND make)
  endforeach()
endif()

if("@MSVC@")
  execute_process(COMMAND nmake install RESULT_VARIABLE result)
elseif("@MINGW@")
  execute_process(COMMAND mingw32-make install RESULT_VARIABLE result)
else()
  execute_process(COMMAND make install RESULT_VARIABLE result)
endif()

if(NOT result EQUAL 0)
  message(FATAL_ERROR "Qt install failed: ${result}")
endif()

# Note: all components must install this files to simplify check
# (see __remove_files)

# Install Hunter plugins
configure_file(
    "@hunter_self@/scripts/Qt5Widgets_HunterPlugin.cmake"
    "@local_install_dir@/lib/cmake/Qt5Widgets/Qt5Widgets_HunterPlugin.cmake"
    COPYONLY
)

# Install extra helper sources
configure_file(
    "@hunter_self@/scripts/static_qt_plugins.cpp"
    "@local_install_dir@/src/static_qt_plugins.cpp"
    COPYONLY
)

if(is_qtbase)
  # Save installed files
  file(
      GLOB_RECURSE
      installed_files
      RELATIVE "@local_install_dir@"
      "@local_install_dir@/*"
  )
  set(QTBASE_INSTALLED_FILES)
  foreach(filepath ${installed_files})
    if(EXISTS "@local_install_dir@/${filepath}")
      if(IS_DIRECTORY "@local_install_dir@/${filepath}")
        # not need to save directories
      else()
        list(APPEND QTBASE_INSTALLED_FILES "${filepath}")
      endif()
    else()
      message(FATAL_ERROR "Internal error")
    endif()
  endforeach()
  string(COMPARE EQUAL "${QTBASE_INSTALLED_FILES}" "" is_empty)
  if(is_empty)
    message(FATAL_ERROR "Empty list for directory: @local_install_dir@")
  endif()
  file(
      WRITE
      "@local_install_dir@/qtbase_installed_files.cmake"
      "set(QTBASE_INSTALLED_FILES ${QTBASE_INSTALLED_FILES})\n"
  )
else()
  # Remove 'qtbase' files (__remove_files)
  foreach(installed_file ${QTBASE_INSTALLED_FILES})
    set(filepath "@local_install_dir@/${installed_file}")
    if(NOT EXISTS "${filepath}")
      message(FATAL_ERROR "File not found: ${filepath}")
    endif()
    file(REMOVE "${filepath}")
    if(EXISTS "${filepath}")
      message(FATAL_ERROR "File not removed: ${filepath}")
    endif()
  endforeach()
endif()
